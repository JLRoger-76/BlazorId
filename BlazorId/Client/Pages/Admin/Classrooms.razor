@page "/classrooms"
@using BlazorId.Shared;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject HttpClient client

@attribute [Authorize]
<h3>Classroom List</h3>
@if (users != null && users.Any())
{
    <table class="table table-light table-bordered">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Company</th>
                <th>
                    @if (!ShowForm)
                    {
                        <button class="btn btn-primary"
                                @onclick="(() => Edit(objClassroom))">
                            Add
                        </button>
                    }
                </th>              
            </tr>
        </thead>
        <tbody>
            @if (ShowForm)
            {
                <tr>
                    <td>@objClassroom.Id</td>
                    <td>
                        <input class="form-control" type="text"
                               placeholder="Name"
                               @bind="@objClassroom.Name" />
                    </td>
                    <td>
                        <InputSelect class="form-select " @bind-Value="@objClassroom.UserId">
                            <option selected>Select a Company</option>
                            @foreach (var user in users)
                            {
                                <option value="@user.Id">@user.FirstName @user.ZipCode @user.City</option>
                            }
                        </InputSelect>
                    </td>
                    <td>
                        <!-- Button to save the classroom -->
                        <button class="btn btn-primary"
                                @onclick="(() => Save(objClassroom))">
                            Save
                        </button>
                       
                    </td>
                </tr>
            }
            @foreach (var classroom in classrooms)
            {
                <tr>
                    <td>@classroom.Id</td>
                    <td>@classroom.Name</td>
                    <td>@classroom.User.FirstName @classroom.User.ZipCode @classroom.User.City</td>
                    <td>
                        <button class="btn btn-primary"
                        @onclick="(() => Edit(classroom))">
                            Edit
                        </button>
                        <button class="btn btn-danger"
                        @onclick="(() => Delete(classroom))">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No classroom found.</p>
}


@code {
    private List<Classroom> classrooms;
    private Classroom objClassroom;
    private List<ApplicationUser> users;
    private string userRole = "Company";
    // To enable showing the form
    bool ShowForm = false;

    protected override async Task OnInitializedAsync()
    {
        // Call your API to get the list of enterprises
        users = await client.GetFromJsonAsync<List<ApplicationUser>>("api/UserRole/Role/" + userRole);
        classrooms = await client.GetFromJsonAsync<List<Classroom>>("api/Classrooms");
        objClassroom = new Classroom();
    }

    private async Task Edit(Classroom classroom)
    {
        objClassroom = classroom;
        ShowForm = true;
    }

    private async Task Save(Classroom classroom)
    {
        if (classroom.Id == 0)
        {   //add classroom
            await client.PostAsJsonAsync("api/Classrooms", classroom);
        }
        else
        {   //update classroom
            await client.PutAsJsonAsync("api/Classrooms/" + classroom.Id, classroom);
        }
        
        ShowForm = false;
        await OnInitializedAsync();
    }

    async Task Delete(Classroom classroom)
    {
        await client.DeleteAsync($"api/Classrooms/{classroom.Id}");
        await OnInitializedAsync();
    }
}

