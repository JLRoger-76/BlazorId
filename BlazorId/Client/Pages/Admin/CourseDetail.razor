@page "/course/{courseId:int}"
@using BlazorId.Shared;
@using Microsoft.AspNetCore.Authorization;
@inject HttpClient client;

@attribute [Authorize]

<h3>Course Detail</h3>
@if (userCourses == null)
{
    <p><em>Chargement...</em></p>
}
else
{
    @if (HasTeacher==false)
    {
        <ul class="list-group">
            @if (freeTeachers.Count != 0)
            {
                <p>Select a teacher</p>
                @foreach (var teacher in freeTeachers)
                {
                    <li class="list-group-item list-group-item-secondary d-flex justify-content-between align-items-center">
                        @teacher.UserName (@teacher.Appreciation)
                        <button class="btn btn-warning"
                                @onclick="(() => AddTeacher(teacher.UserName))">
                            Add
                        </button>
                    </li>
                }
            }
        </ul>
    }
    <p>Select students</p>
    <table class="table table-light table-bordered">
        <thead>
            <tr>
                <th>Animation</th>
                <th>Anwers</th>
                <th>Available</th>
                <th>Expertise</th>
                <th>Pedagogy</th>
                <th>Action</th>
            </tr>
            <tr>
                <th>Welcome</th>
                <th>Environment</th>
                <th>Content</th>
                <th>Satisfaction</th>
                <th>Recommendation</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var userCourse in userCourses)
            {
                <tr>
                    <td colspan="5">@userCourse.UserName</td>
                    <td>
                        <button class="btn btn-warning"
                                @onclick="(() => DeleteCandidat(userCourse.Id))">
                            Delete
                        </button>

                    </td>
                </tr>
                <tr>
                    <td>@userCourse.TeacherAnimation</td>
                    <td>@userCourse.TeacherAnswers</td>
                    <td>@userCourse.TeacherAvailability</td>
                    <td>@userCourse.TeacherExpertise</td>
                    <td>@userCourse.TeacherPedagogy</td>
                </tr>
                <tr>
                    <td>@userCourse.Welcome</td>
                    <td>@userCourse.Enviromnent</td>
                    <td>@userCourse.Content</td>
                    <td>@userCourse.Satisfaction</td>
                    <td>@userCourse.Recommendation</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int courseId { get; set; }
    private Course editCourse;
    private List<ApplicationUser>? teachers;
    private List<ApplicationUser>? freeTeachers;
    private List<UserCourse>? userCourses;
    private UserCourse objuserCourse = new UserCourse();
    private List<UserCourse>? teacherCourses;
    private UserCourse? teacherCourse;
    private bool HasTeacher;


    protected override async Task OnInitializedAsync()
    {

        // List of students & teacher in the course
        userCourses = await client.GetFromJsonAsync<List<UserCourse>>("api/UserCourses/Users/" + courseId);
        //get teacher of the course
        teachers = await client.GetFromJsonAsync<List<ApplicationUser>>("api/UserRole/Role/Teacher");
        foreach (UserCourse usercourse in userCourses)
        {
            foreach (var teacher in teachers)
            {
                //create teacherCourse
                if (teacher.UserName == usercourse.UserName) HasTeacher=true;
            }
        }
        if( HasTeacher == false)
        {
            freeTeachers = await client.GetFromJsonAsync<List<ApplicationUser>>("api/UserCourses/Teachers/" + courseId);
        }      
    }

    private async Task AddTeacher(string name)
    {
        objuserCourse.CourseId = courseId;
        objuserCourse.UserName = name;
        await client.PostAsJsonAsync("api/UserCourses", objuserCourse);
        await OnInitializedAsync();
    }

    private async Task DeleteCandidat(int id)
    {
        await client.DeleteAsync($"api/UserCourses/{id}");
        await OnInitializedAsync();
    }
}
