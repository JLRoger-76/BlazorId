@page "/trainings"
@using BlazorId.Shared;
@inject NavigationManager NavigationManager
<h3>Trainings</h3>
@if (categories == null)
{
    <p><em>Chargement...</em></p>
}
else
{
    @if (categories[0].ParentId > 0)
    {
        <button class="btn btn-success"
        @onclick="(() => ShowParent(categories[0].ParentId))">
            Back
        </button>
    }
    @if (showTrainings == false)
    {
        
        <div class="container-fluid">
            <ul class="list-group">
                @foreach (var category in categories)
                {
                    <li class="list-group-item list-group-item-secondary d-flex justify-content-between align-items-center">
                        @category.Name
                        @if (category.ExistChildren)
                        {
                            <button class="btn btn-success"
                            @onclick="(() => ShowChildren(category.Id))">
                                Sub-categories
                            </button>
                        }
                        @if (category.IsLinked)
                        {
                            <button class="btn btn-success"
                            @onclick="(() => ShowTrainings(category.Id))">
                                Trainings
                            </button>
                        }
                    </li>
                }
            </ul>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var ct in categoryTrainings)
            {
                <div class="col-sm-12 col-md-6 col-lg-4">
                    <div class="card bg-light">
                        <div class="card-body">
                            <p>@ct.Training!.Name</p>
                            <p>@ct.Training.Duration days</p>
                            <p>@ct.Training.Price euros</p>
                            <button class="btn btn-success"
                            @onclick="(() => ShowDetail(ct.Training.Id))">
                                Details
                            </button>                          
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}

@code {
    [Inject]
    private IHttpAnonymousClientFactory client { get; set; }
    private List<Category>? categories;
    private int IdParent = 0;
    private List<CategoryTraining>? categoryTrainings;
    private bool showTrainings;


    protected override async Task OnInitializedAsync()
    {
        categories = await client.HttpClient.GetFromJsonAsync<List<Category>>("api/Categories/Parent/" + IdParent);
        foreach (Category category in categories!)
        {
            // exist sub-category
            var children = await client.HttpClient.GetFromJsonAsync<List<Category>>("api/Categories/Parent/" + category.Id);
            category.ExistChildren = (children!.Count() != 0);

            // exist links category - training
            categoryTrainings = await client.HttpClient.GetFromJsonAsync<List<CategoryTraining>>("api/CategoryTrainings/" + category.Id);
            category.IsLinked = (categoryTrainings!.Count != 0);
        }
    }

    async Task ShowParent(int id)
    {
        var category = await client.HttpClient.GetFromJsonAsync<Category>("api/Categories/" + id);
        IdParent = category!.ParentId;
        showTrainings = false;
        await OnInitializedAsync();
    }

    async Task ShowChildren(int id)
    {
        IdParent = id;
        await OnInitializedAsync();
    }

    async Task ShowTrainings(int categoryid)
    {
        showTrainings = true;
        // links from category.id
        categoryTrainings = await client.HttpClient.GetFromJsonAsync<List<CategoryTraining>>("api/CategoryTrainings/" + categoryid);
    }
   

    private  void ShowDetail(int id)
    {
        NavigationManager.NavigateTo("trainingDetail/"+id);
    } 
}